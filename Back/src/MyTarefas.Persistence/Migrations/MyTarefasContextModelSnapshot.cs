// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyTarefas.Persistence.Contextos;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyTarefas.Persistence.Migrations
{
    [DbContext(typeof(MyTarefasContext))]
    partial class MyTarefasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("MyTarefas.Domain.Acompanhamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<string>("HorasPrevistas")
                        .HasColumnType("text");

                    b.Property<string>("Saldo")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("Acompanhamentos");

                    b.HasData(
                        new
                        {
                            Id = 1142593671L,
                            CardId = 613582855L,
                            HorasPrevistas = "00:30",
                            Saldo = "00:10",
                            Status = 1
                        },
                        new
                        {
                            Id = 1236741003L,
                            CardId = 1734352471L,
                            HorasPrevistas = "00:30",
                            Saldo = "00:10",
                            Status = 1
                        });
                });

            modelBuilder.Entity("MyTarefas.Domain.AcompanhamentoUsuario", b =>
                {
                    b.Property<long>("AcompanhamentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("AcompanhamentoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AcompanhamentoUsuario");

                    b.HasData(
                        new
                        {
                            AcompanhamentoId = 1142593671L,
                            UsuarioId = 1744427582L
                        });
                });

            modelBuilder.Entity("MyTarefas.Domain.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataPrevisao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Projeto")
                        .HasColumnType("text");

                    b.Property<long>("TarefaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TarefaId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 613582855L,
                            DataPrevisao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Usar a branch master, fazer pull, após isso...",
                            Projeto = "Company",
                            TarefaId = 19518833L,
                            Titulo = "Criar Migration"
                        },
                        new
                        {
                            Id = 1734352471L,
                            DataPrevisao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Colunas utilizadas: Código, nome, Descrição...",
                            Projeto = "Company",
                            TarefaId = 1193556483L,
                            Titulo = "Listagem de clientes"
                        });
                });

            modelBuilder.Entity("MyTarefas.Domain.Departamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("MyTarefas.Domain.Tarefa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tarefas");

                    b.HasData(
                        new
                        {
                            Id = 19518833L,
                            Descricao = "Aguardando"
                        },
                        new
                        {
                            Id = 1109521758L,
                            Descricao = "Em Andamento"
                        },
                        new
                        {
                            Id = 808961563L,
                            Descricao = "Pendência"
                        },
                        new
                        {
                            Id = 1659783382L,
                            Descricao = "Finalizado"
                        },
                        new
                        {
                            Id = 1193556483L,
                            Descricao = "Outros"
                        });
                });

            modelBuilder.Entity("MyTarefas.Domain.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1744427582L,
                            Descricao = "Carlos"
                        });
                });

            modelBuilder.Entity("MyTarefas.Domain.Acompanhamento", b =>
                {
                    b.HasOne("MyTarefas.Domain.Card", null)
                        .WithOne("Acompanhamento")
                        .HasForeignKey("MyTarefas.Domain.Acompanhamento", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTarefas.Domain.AcompanhamentoUsuario", b =>
                {
                    b.HasOne("MyTarefas.Domain.Acompanhamento", null)
                        .WithMany("AcompanhamentosUsuarios")
                        .HasForeignKey("AcompanhamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTarefas.Domain.Usuario", "Usuario")
                        .WithMany("AcompanhamentosUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MyTarefas.Domain.Card", b =>
                {
                    b.HasOne("MyTarefas.Domain.Tarefa", "Tarefa")
                        .WithMany("Cards")
                        .HasForeignKey("TarefaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("MyTarefas.Domain.Departamento", b =>
                {
                    b.HasOne("MyTarefas.Domain.Card", null)
                        .WithOne("Departamento")
                        .HasForeignKey("MyTarefas.Domain.Departamento", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTarefas.Domain.Acompanhamento", b =>
                {
                    b.Navigation("AcompanhamentosUsuarios");
                });

            modelBuilder.Entity("MyTarefas.Domain.Card", b =>
                {
                    b.Navigation("Acompanhamento");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("MyTarefas.Domain.Tarefa", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MyTarefas.Domain.Usuario", b =>
                {
                    b.Navigation("AcompanhamentosUsuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
